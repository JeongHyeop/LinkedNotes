<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <PageId>9c1c219b-1b30-4e34-a6bb-d66da39c8901</PageId>
  <Text>{\rtf1\ansi\ansicpg949\deff0\deflang1033\deflangfe1042{\fonttbl{\f0\fmodern\fprq1\fcharset129 \'b1\'bc\'b8\'b2;}{\f1\fnil\fcharset0 Microsoft Sans Serif;}}
\viewkind4\uc1\pard\lang1042\f0\fs20\'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'f9\'c0\'cc\'b6\'f5 \'c5\'ac\'b7\'a1\'bd\'ba\'bf\'a1\'bc\'ad \'bb\'e7\'bf\'eb\'b5\'c7\'b4\'c2 \'b0\'b3\'b3\'e4\'c0\'b8\'b7\'ce \'b1\'e2\'ba\'bb \'c5\'ac\'b7\'a1\'bd\'ba\'bf\'a1 \'bc\'b1\'be\'f0\'b5\'c8 \'b8\'e2\'b9\'f6 \'c7\'d4\'bc\'f6\'bf\'cd \'b0\'b0\'c0\'ba \'c7\'fc\'c5\'c2\'c0\'c7 \'b8\'e2\'b9\'f6 \'c7\'d4\'bc\'f6\'b8\'a6 \'c6\'c4\'bb\'fd \'c5\'ac\'b7\'a1\'bd\'ba\'bf\'a1\'bc\'ad \'bb\'f5\'b7\'d3\'b0\'d4 \'bc\'b1\'be\'f0\'c7\'cf\'b4\'c2 \'b0\'cd\'c0\'cc\'b4\'d9.\par
\par
\'bf\'a9\'b1\'e2\'bc\'ad \'c1\'d6\'c0\'c7 \'c7\'d2\'b0\'cd\'c0\'ba \'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'f9\'c0\'bb \'c0\'e7\'c1\'a4\'c0\'c7\'b7\'ce \'be\'cb\'b0\'ed \'c0\'d6\'b4\'c2\'b5\'a5 \'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'f9\'c0\'ba \'c6\'af\'bc\'ba\'c0\'cc \'c0\'e7\'c1\'a4\'c0\'c7\'c0\'ce \'b0\'cd\'c0\'cc\'b0\'ed \'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'f9 \'c0\'da\'c3\'bc\'b4\'c2\'c0\'e7\'c1\'a4\'c0\'c7\'b0\'a1 \'be\'c6\'b4\'cf\'b4\'d9.\par
\f1\par
\f0\'bf\'c0\'b9\'f6 \'b6\'f3\'c0\'cc\'b5\'f9 - \'c5\'ac\'b7\'a1\'bd\'ba \'b3\'bb\'c0\'c7 \'c7\'d4\'bc\'f6 \'c0\'e7\'c1\'a4\'c0\'c7\par
\par
\'c6\'af\'c2\'a1\par
-\'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'e5 \'c7\'cf\'b0\'ed\'c0\'da \'c7\'cf\'b4\'c2 \'b8\'de\'bc\'ad\'b5\'e5\'b0\'a1 \'bb\'f3\'c0\'a7 \'c5\'ac\'b7\'a1\'bd\'ba\'bf\'a1 \'c1\'b8\'c0\'e7\'c7\'d8\'be\'df\'c7\'d1\'b4\'d9.\par
-\'b8\'de\'bc\'ad\'b5\'e5 \'c0\'cc\'b8\'a7\'c0\'cc \'b0\'b0\'be\'c6\'be\'df \'c7\'d1\'b4\'d9.\par
-\'b8\'de\'bc\'ad\'b5\'e5 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd \'b0\'b3\'bc\'f6, \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'c0\'c7 \'c0\'da\'b7\'e1\'c7\'fc\'c0\'cc \'b0\'b0\'be\'c6\'be\'df \'c7\'d1\'b4\'d9.\par
-\'b8\'de\'bc\'ad\'b5\'e5 \'b8\'ae\'c5\'cf\'c7\'fc\'c0\'cc \'b0\'b0\'be\'c6\'be\'df \'c7\'d1\'b4\'d9.\par
-\'bb\'f3\'c0\'a7 \'b8\'de\'bc\'ad\'b5\'e5\'bf\'cd \'b5\'bf\'c0\'cf\'c7\'cf\'b0\'c5\'b3\'aa \'b3\'bb\'bf\'eb\'c0\'cc \'c3\'df\'b0\'a1 \'b5\'c7\'b0\'c5\'b3\'aa \'b9\'d9\'b2\'ee\'be\'ee\'be\'df \'c7\'d1\'b4\'d9.\par
\f1\par
class Parent\par
\{\par
\tab string s;\par
public:\par
\tab Parent () : s("\f0\'ba\'ce\'b8\'f0") \par
\tab\{\par
\tab\tab cout &lt;&lt; "\'ba\'ce\'b8\'f0 \'c5\'ac\'b7\'a1\'bd\'ba" &lt;&lt; endl;\par
\tab\}\par
\tab void what() \{ cout &lt;&lt; s &lt;&lt; endl;\}\par
\};\par
class Child : public Parent\par
\{\par
\tab string s;\par
public:\par
\tab Child () : s("\'c0\'da\'bd\'c4"), Parent() \par
\tab\{\par
\tab\tab cout &lt;&lt; "\'c0\'da\'bd\'c4 \'c5\'ac\'b7\'a1\'bd\'ba" &lt;&lt; endl;\par
\tab\}\par
\tab void what() \{ cout &lt;&lt; s &lt;&lt; endl;\}\par
\};\par
int main()\par
\{\par
\tab cout &lt;&lt; " === \'ba\'ce\'b8\'f0 \'c5\'ac\'b7\'a1\'bd\'ba \'bb\'fd\'bc\'ba ===" &lt;&lt; endl;\par
\tab Parent p;\par
\tab p.what();\par
\tab cout &lt;&lt; " === \'c0\'da\'bd\'c4 \'c5\'ac\'b7\'a1\'bd\'ba \'bb\'fd\'bc\'ba ===" &lt;&lt; endl;\par
\tab Child c;\par
\tab c.what();\par
\tab return 0;\par
\}\par
\par
\f1\par
}
&#x0;</Text>
  <Encrypted>false</Encrypted>
  <Name>오버라이딩</Name>
  <CreatedBy>Anonymous</CreatedBy>
  <CreatedOn>2017-04-03T11:04:05.8464275+09:00</CreatedOn>
  <UpdatedBy>Anonymous</UpdatedBy>
  <UpdatedOn>2017-04-14T21:29:12.4788381+09:00</UpdatedOn>
  <Words>오버라이딩이란 클래스에서 사용되는 개념으로 기본 클래스에 선언된 멤버 함수와 같은 형태의 멤버 함수를 파생 클래스에서 새롭게 선언하는 것이다.

여기서 주의 할것은 오버라이딩을 재정의로 알고 있는데 오버라이딩은 특성이 재정의인 것이고 오버라이딩 자체는재정의가 아니다.

오버 라이딩 - 클래스 내의 함수 재정의

특징
-오버라이드 하고자 하는 메서드가 상위 클래스에 존재해야한다.
-메서드 이름이 같아야 한다.
-메서드 파라미터 개수, 파라미터의 자료형이 같아야 한다.
-메서드 리턴형이 같아야 한다.
-상위 메서드와 동일하거나 내용이 추가 되거나 바뀌어야 한다.

class Parent
{
	string s;
public:
	Parent () : s("부모") 
	{
		cout &lt;&lt; "부모 클래스" &lt;&lt; endl;
	}
	void what() { cout &lt;&lt; s &lt;&lt; endl;}
};
class Child : public Parent
{
	string s;
public:
	Child () : s("자식"), Parent() 
	{
		cout &lt;&lt; "자식 클래스" &lt;&lt; endl;
	}
	void what() { cout &lt;&lt; s &lt;&lt; endl;}
};
int main()
{
	cout &lt;&lt; " === 부모 클래스 생성 ===" &lt;&lt; endl;
	Parent p;
	p.what();
	cout &lt;&lt; " === 자식 클래스 생성 ===" &lt;&lt; endl;
	Child c;
	c.what();
	return 0;
}

</Words>
  <PublishedOn>0001-01-01T00:00:00</PublishedOn>
  <PublishedUrl />
  <PublishedService>0</PublishedService>
</Page>