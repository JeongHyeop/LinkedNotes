<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <PageId>cc2fe108-b361-46ee-b300-3cecc4656dbf</PageId>
  <Text>{\rtf1\ansi\ansicpg949\deff0\deflang1033\deflangfe1042{\fonttbl{\f0\fmodern\fprq1\fcharset129 \'b1\'bc\'b8\'b2;}{\f1\fnil\fcharset0 Microsoft Sans Serif;}{\f2\fnil\fcharset129 \'b1\'bc\'b8\'b2;}}
\viewkind4\uc1\pard\lang1042\f0\fs18\'b0\'a1\'bb\'f3\'c7\'d4\'bc\'f6(\f1 Virtual\f0  \f1 Method\f0 )\'b4\'c2 \f1 virtual\f0  \'c5\'b0\'bf\'f6\'b5\'e5\'b0\'a1 \'ba\'d9\'b0\'ed \'bb\'f3\'bc\'d3\'c7\'cf\'b4\'c2 \'c5\'ac\'b7\'a1\'bd\'ba\f1\fs20  \f0\fs18\'b3\'bb\'bf\'a1\'bc\'ad \'b0\'b0\'c0\'ba \'bd\'c3\'b1\'d7\'b4\'cf\'c3\'b3\'c0\'c7 \'c7\'d4\'bc\'f6\'b7\'ce \'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'f9\f1\fs20  \f2\fs18\'b5\'c9 \'bc\'f6 \'c0\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\'c0\'cc\'b4\'d9.\par
\par
\'b5\'bf\'c0\'db\'bf\'f8\'b8\'ae\par
-\'c5\'ac\'b7\'a1\'bd\'ba\'bf\'a1 \'b0\'a1\'bb\'f3 \'c7\'d4\'bc\'f6\'b0\'a1 \'c0\'d6\'b4\'d9\'b8\'e9 \'c4\'c4\'c6\'c4\'c0\'cf\'b7\'af\'b4\'c2 \'c7\'d4\'bc\'f6\'c0\'c7 \'c0\'a7\'c4\'a1 \'c1\'a4\'ba\'b8\'b8\'a6 \'b0\'a1\'c1\'f6\'b0\'ed \'c0\'d6\'b4\'c2 \'b0\'a1\'bb\'f3 \'c7\'d4\'bc\'f6 \'c5\'d7\'c0\'cc\'ba\'ed\'c0\'bb \'b8\'b8\'b5\'e9\'b0\'ed \'b0\'b4\'c3\'bc\'bf\'a1\'b4\'c2 \'b0\'a1\'bb\'f3 \'c7\'d4\'bc\'f6 \'c5\'d7\'c0\'cc\'ba\'ed\'c0\'bb \'c0\'a7\'c7\'d1 \'c6\'f7\'c0\'ce\'c5\'cd \f1 vptr \f2\'b8\'e2\'b9\'f6 \'ba\'af\'bc\'f6\'b7\'ce \'c3\'df\'b0\'a1 \'bd\'c3\'c5\'b2\'b4\'d9. \'c0\'cf\'b9\'dd\'c0\'fb\'c0\'b8\'b7\'ce \'b0\'a1\'bb\'f3 \'c7\'d4\'bc\'f6\'b0\'a1 \'c0\'d6\'b4\'c2 \'b0\'b4\'c3\'bc\'b4\'c2 \'b0\'a1\'bb\'f3 \'c7\'d4\'bc\'f6 \'c5\'d7\'c0\'cc\'ba\'ed\'bf\'a1 \'c0\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\'b8\'b8\'c0\'bb \'c8\'a3\'c3\'e2\'c7\'cf\'b4\'c2 \'bf\'f8\'c4\'a2\'c0\'bb \'b0\'a1\'c1\'f8\'b4\'d9.\par
\par
\'b4\'dc\'c1\'a1\par
-\'b0\'a1\'bb\'f3\'c7\'d4\'bc\'f6\'b8\'a6 \'be\'b2\'b8\'e9 \'b0\'a1\'bb\'f3\'c7\'d4\'bc\'f6 \'c5\'d7\'c0\'cc\'ba\'ed\'c0\'bb \'b8\'b8\'b5\'e5\'b9\'c7\'b7\'ce \'b1\'d7\'b8\'b8\'c5\'ad\'c0\'c7 \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3 \'bc\'d2\'b8\'f0\'b0\'a1 \'c0\'cf\'be\'ee\'b3\'b2\par
-\'c1\'f7\'c1\'a2\'b0\'a1\'be\'df \'c7\'d2 \'ba\'ce\'ba\'d0\'c0\'bb \'c0\'cc \'b0\'a1\'bb\'f3\'c7\'d4\'bc\'f6 \'c5\'d7\'c0\'cc\'ba\'ed\'c0\'bb \'b0\'c5\'c3\'c4 \'b0\'a1\'be\'df \'c7\'cf\'b4\'c2 \'b8\'b8\'c5\'ad \'b5\'f4\'b7\'b9\'c0\'cc\'b0\'a1 \'bb\'fd\'b1\'e4\'b4\'d9.\par
\par
\'c6\'af\'c2\'a1\par
-\'ba\'ce\'b8\'f0\'c0\'c7 \'c7\'d4\'bc\'f6\'b8\'a6 \'b0\'a1\'bb\'f3\'c7\'d4\'bc\'f6\'b7\'ce \'b8\'b8\'b5\'e9\'be\'fa\'c0\'bb \'b6\'a7 \'c6\'c4\'bb\'fd\'c5\'ac\'b7\'a1\'bd\'ba\'b4\'c2 \f1 virtual\f2  \'c5\'b0\'bf\'f6\'b5\'e5\'b8\'a6 \'ba\'d9\'c0\'cc\'c1\'f6 \'be\'ca\'be\'c6\'b5\'b5 \'b0\'a1\'bb\'f3 \'c7\'d4\'bc\'f6\'b7\'ce \'c3\'eb\'b1\'de\'c7\'d1\'b4\'d9.! \'c7\'cf\'c1\'f6\'b8\'b8 \'b8\'ed\'bd\'c3\'c0\'fb\'c0\'b8\'b7\'ce \'ba\'d9\'bf\'a9\'c1\'e0\'be\'df \'c7\'f2\'b0\'a5\'b8\'ae\'c1\'f6 \'be\'ca\'c0\'bd\par
\par
\'bb\'e7\'bf\'eb\'c7\'cf\'b4\'c2 \'c0\'cc\'c0\'af\par
class Person\par
\{\par
public:\par
    void Method()\{ std::cout &lt;&lt; "Person's Method" &lt;&lt; std::endl; \}\par
    virtual void VirtualMethod()\{ std::cout &lt;&lt; "Person's Virtual Method" &lt;&lt; std::endl; \}\par
\};\par
class Student : public Person\par
\{\par
public:\par
    void Method()\{ std::cout &lt;&lt; "Student's Method" &lt;&lt; std::endl; \}\par
    virtual void VirtualMethod() \{ std::cout &lt;&lt; "Student's Virtual Method" &lt;&lt; std::endl; \}\par
\};\par
int main(int argc, char** argv) \{\par
    Person* person = new Person;\par
    Student* student = new Student;\par
\par
    person-&gt;Method();\par
    student-&gt;Method();\par
\par
    ((Person*)person)-&gt;Method();\par
    ((Person*)student)-&gt;Method();\par
\par
    person-&gt;VirtualMethod();\par
    student-&gt;VirtualMethod();\par
\par
    ((Person*)person)-&gt;VirtualMethod();\par
    ((Person*)student)-&gt;VirtualMethod();\par
\par
    delete person;\par
    delete student;\par
    delete univStudent;\par
\}\par
\fs20\'b0\'e1\'b0\'fa\par
Person's Method\par
Student's Method\par
\par
Person's Method\par
Person's Method\par
\par
Person's Virtual Method\par
Student's Virtual Method\par
\par
Person's Virtual Method\par
Student's Virtual Method\par
\par
\'c0\'cc\'b0\'cd\'c0\'bb \'ba\'b8\'b8\'e9 \'be\'cb \'bc\'f6 \'c0\'d6\'b5\'ed\'c0\'cc \'b1\'d7\'b3\'c9 \'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'f9 \'b5\'c8 \'c7\'d4\'bc\'f6\'b4\'c2 \'ba\'ce\'b8\'f0\'b7\'ce \'c7\'fc \'ba\'af\'c8\'af\'c0\'bb \'c7\'df\'c0\'bb \'b6\'a7 \'ba\'ce\'b8\'f0\'c0\'c7 \'c7\'d4\'bc\'f6\'b8\'a6 \'c8\'a3\'c3\'e2\'c7\'cf\'b0\'ed \'b0\'a1\'bb\'f3 \'c7\'d4\'bc\'f6\'b4\'c2 \'c0\'da\'bd\'c5\'c0\'c7 \'c7\'d4\'bc\'f6\'b8\'a6 \'c8\'a3\'c3\'e2\'c7\'d1\'b4\'d9 \'c0\'cc\'b7\'af\'c7\'d1 \'c0\'cc\'c0\'af\'b4\'c2 \'b0\'a1\'bb\'f3\'c7\'d4\'bc\'f6 \'c5\'d7\'c0\'cc\'ba\'ed\'bf\'a1 \'bf\'c3\'b6\'f3\'b0\'a1 \'c0\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'d8 \'ba\'ce\'b8\'a3\'b1\'e2 \'b6\'a7\'b9\'ae\'c0\'cc\'b4\'d9.\par
}
&#x0;</Text>
  <Encrypted>false</Encrypted>
  <Name>가상 함수</Name>
  <CreatedBy>Anonymous</CreatedBy>
  <CreatedOn>2017-04-01T14:44:12.8531941+09:00</CreatedOn>
  <UpdatedBy>Anonymous</UpdatedBy>
  <UpdatedOn>2017-04-07T16:03:37.1728541+09:00</UpdatedOn>
  <Words>가상함수(Virtual Method)는 virtual 키워드가 붙고 상속하는 클래스 내에서 같은 시그니처의 함수로 오버라이딩 될 수 있는 함수이다.

동작원리
-클래스에 가상 함수가 있다면 컴파일러는 함수의 위치 정보를 가지고 있는 가상 함수 테이블을 만들고 객체에는 가상 함수 테이블을 위한 포인터 vptr 멤버 변수로 추가 시킨다. 일반적으로 가상 함수가 있는 객체는 가상 함수 테이블에 있는 함수만을 호출하는 원칙을 가진다.

단점
-가상함수를 쓰면 가상함수 테이블을 만드므로 그만큼의 메모리 공간 소모가 일어남
-직접가야 할 부분을 이 가상함수 테이블을 거쳐 가야 하는 만큼 딜레이가 생긴다.

특징
-부모의 함수를 가상함수로 만들었을 때 파생클래스는 virtual 키워드를 붙이지 않아도 가상 함수로 취급한다.! 하지만 명시적으로 붙여줘야 헷갈리지 않음

사용하는 이유
class Person
{
public:
    void Method(){ std::cout &lt;&lt; "Person's Method" &lt;&lt; std::endl; }
    virtual void VirtualMethod(){ std::cout &lt;&lt; "Person's Virtual Method" &lt;&lt; std::endl; }
};
class Student : public Person
{
public:
    void Method(){ std::cout &lt;&lt; "Student's Method" &lt;&lt; std::endl; }
    virtual void VirtualMethod() { std::cout &lt;&lt; "Student's Virtual Method" &lt;&lt; std::endl; }
};
int main(int argc, char** argv) {
    Person* person = new Person;
    Student* student = new Student;

    person-&gt;Method();
    student-&gt;Method();

    ((Person*)person)-&gt;Method();
    ((Person*)student)-&gt;Method();

    person-&gt;VirtualMethod();
    student-&gt;VirtualMethod();

    ((Person*)person)-&gt;VirtualMethod();
    ((Person*)student)-&gt;VirtualMethod();

    delete person;
    delete student;
    delete univStudent;
}
결과
Person's Method
Student's Method

Person's Method
Person's Method

Person's Virtual Method
Student's Virtual Method

Person's Virtual Method
Student's Virtual Method

이것을 보면 알 수 있듯이 그냥 오버라이딩 된 함수는 부모로 형 변환을 했을 때 부모의 함수를 호출하고 가상 함수는 자신의 함수를 호출한다 이러한 이유는 가상함수 테이블에 올라가 있는 함수를 참조해 부르기 때문이다.</Words>
  <PublishedOn>0001-01-01T00:00:00</PublishedOn>
  <PublishedUrl />
  <PublishedService>0</PublishedService>
</Page>