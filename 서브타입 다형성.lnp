<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <PageId>be00aa3a-6eba-49a9-b054-1ff13aae7183</PageId>
  <Text>{\rtf1\ansi\ansicpg949\deff0\deflang1033\deflangfe1042{\fonttbl{\f0\fnil\fcharset0 Microsoft Sans Serif;}{\f1\fmodern\fprq1\fcharset129 \'b1\'bc\'b8\'b2;}{\f2\fnil\fcharset129 \'b1\'bc\'b8\'b2;}}
\viewkind4\uc1\pard\lang1042\f0\fs20 (\f1\fs18\'b7\'b1\'c5\'b8\'c0\'d3 \'b4\'d9\'c7\'fc\'bc\'ba\f0\fs20 )\par
\f1\fs18\'bc\'ad\'ba\'ea\'c5\'b8\'c0\'d4 \'b4\'d9\'c7\'fc\'bc\'ba\'c0\'ba \f0 A\f2\'b0\'a1 \f0 B\f2\'c0\'c7 \'bc\'ad\'ba\'ea\'c5\'b8\'c0\'d4\'c0\'cf \'b0\'e6\'bf\'ec \f0 A\f2\'b8\'a6 \f0 B\f2\'b7\'ce \'b0\'a3\'c1\'d6\'c7\'d8\'bc\'ad \'bb\'e7\'bf\'eb\'c7\'d8\'b5\'b5 \'bd\'c7\'c1\'a6\'b7\'ce \f0 A\f2\'b7\'ce\'bd\'e1 \'c0\'db\'b5\'bf\'c7\'cf\'b4\'c2 \'b0\'cd\'c0\'bb \'b8\'bb\'c7\'d1\'b4\'d9.\par
\'bf\'b9\'b8\'a6\'b5\'e9\'be\'ee \'b5\'bf\'b9\'b0\'c0\'cc\'b6\'f5 \'b0\'b4\'c3\'bc\'b0\'a1 \'bc\'ad\'ba\'ea\'c5\'b8\'c0\'d4\'c0\'b8\'b7\'ce \'c4\'b9, \'c5\'b8\'c0\'cc\'b0\'c5, \'b0\'b3\'b8\'a6 \'bc\'ad\'ba\'ea\'c5\'b8\'c0\'d4\'c0\'b8\'b7\'ce \'b0\'a1\'c1\'f6\'b0\'ed \'c0\'d6\'c0\'bb \'b0\'e6\'bf\'ec \'b6\'c8\'b0\'b0\'c0\'cc \'b5\'bf\'b9\'b0\'b7\'ce \'b0\'a3\'c1\'d6\'c7\'d8\'bc\'ad \'b5\'bf\'c0\'db\'c7\'cf\'b4\'c2 \'b9\'e6\'b9\'fd\'c0\'cc\'b4\'d9. \f0 C++\f2\'c0\'ba \'c0\'cc\'b0\'cd\'c0\'bb \'b1\'b8\'c7\'f6\'c7\'d2\'b6\'a7 \'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'f9\'c0\'bb \'c5\'eb\'c7\'d8\'bc\'ad \'c1\'f6\'bf\'f8\'c7\'d1\'b4\'d9. \'b5\'bf\'b9\'b0\'c0\'bb \'b0\'a2\'b0\'a2 \'bb\'f3\'bc\'d3\'b9\'de\'b0\'ed \'b0\'a2\'c0\'da \'b8\'de\'bc\'ad\'b5\'e5\'b7\'ce \'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'f9\'c7\'d8\'bc\'ad \'b7\'b1\'c5\'b8\'c0\'d3\'b6\'a7 \'b0\'a1\'bb\'f3 \'c5\'d7\'c0\'cc\'ba\'ed\'bf\'a1\'bc\'ad \'c2\'fc\'c1\'b6\'c7\'cf\'bf\'a9 \'bd\'c7\'c7\'e0\'b5\'c9 \'c7\'d4\'bc\'f6\'b8\'a6 \'b0\'e1\'c1\'a4\'c7\'d1\'b4\'d9.\f1\par
\par
\'bf\'b9\'c1\'a6)\par
class Felid \{\par
    public:\par
        virtual void meow() = 0;\par
\};\par
\par
class Cat : public Felid \{\par
public:\par
    void meow() \{ std::cout &lt;&lt; "Meowing like a regular cat! meow!\\n"; \}\par
\};\par
\par
class Tiger : public Felid \{\par
public:\par
    void meow() \{ std::cout &lt;&lt; "Meowing like a tiger! MREOWWW!\\n"; \}\par
\};\par
\par
class Ocelot : public Felid \{\par
public:\par
    void meow() \{ std::cout &lt;&lt; "Meowing like an ocelot! mews!\\n"; \}\par
\};\par
\par
void do_meowing(Felid *cat) \{\par
    cat-&gt;meow();\par
\}\par
\par
int main() \{\par
    Cat cat;\par
    Tiger tiger;\par
    Ocelot ocelot;\par
\par
    do_meowing(&amp;cat);\par
    do_meowing(&amp;tiger);\par
    do_meowing(&amp;ocelot);\par
\}\f0\fs20\par
}
&#x0;</Text>
  <Encrypted>false</Encrypted>
  <Name>서브타입 다형성</Name>
  <CreatedBy>Anonymous</CreatedBy>
  <CreatedOn>2017-04-03T10:15:19.6685069+09:00</CreatedOn>
  <UpdatedBy>Anonymous</UpdatedBy>
  <UpdatedOn>2017-04-14T21:01:41.7244203+09:00</UpdatedOn>
  <Words>(런타임 다형성)
서브타입 다형성은 A가 B의 서브타입일 경우 A를 B로 간주해서 사용해도 실제로 A로써 작동하는 것을 말한다.
예를들어 동물이란 객체가 서브타입으로 캣, 타이거, 개를 서브타입으로 가지고 있을 경우 똑같이 동물로 간주해서 동작하는 방법이다. C++은 이것을 구현할때 오버라이딩을 통해서 지원한다. 동물을 각각 상속받고 각자 메서드로 오버라이딩해서 런타임때 가상 테이블에서 참조하여 실행될 함수를 결정한다.

예제)
class Felid {
    public:
        virtual void meow() = 0;
};

class Cat : public Felid {
public:
    void meow() { std::cout &lt;&lt; "Meowing like a regular cat! meow!\n"; }
};

class Tiger : public Felid {
public:
    void meow() { std::cout &lt;&lt; "Meowing like a tiger! MREOWWW!\n"; }
};

class Ocelot : public Felid {
public:
    void meow() { std::cout &lt;&lt; "Meowing like an ocelot! mews!\n"; }
};

void do_meowing(Felid *cat) {
    cat-&gt;meow();
}

int main() {
    Cat cat;
    Tiger tiger;
    Ocelot ocelot;

    do_meowing(&amp;cat);
    do_meowing(&amp;tiger);
    do_meowing(&amp;ocelot);
}</Words>
  <PublishedOn>0001-01-01T00:00:00</PublishedOn>
  <PublishedUrl />
  <PublishedService>0</PublishedService>
</Page>