<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <PageId>c38340e3-7ed0-40fa-a183-1a5fa9f84687</PageId>
  <Text>{\rtf1\ansi\ansicpg949\deff0\deflang1033\deflangfe1042{\fonttbl{\f0\fmodern\fprq1\fcharset129 \'b1\'bc\'b8\'b2;}{\f1\fnil\fcharset0 Microsoft Sans Serif;}{\f2\fnil\fcharset129 \'b1\'bc\'b8\'b2;}{\f3\fnil DotumChe;}{\f4\fnil\fcharset0 DotumChe;}{\f5\fnil\fcharset129 DotumChe;}}
{\colortbl ;\red86\green156\blue214;\red30\green30\blue30;\red220\green220\blue220;\red200\green200\blue200;\red180\green180\blue180;\red127\green127\blue127;\red181\green206\blue168;\red87\green166\blue74;}
\viewkind4\uc1\pard\lang1042\f0\fs18\'c4\'fc \'c1\'a4\'b7\'c4\'c0\'ba \'bf\'ac\'bc\'d3\'c0\'fb\'c0\'ce \'ba\'d0\'c7\'d2\'bf\'a1 \'c0\'c7\'c7\'d8\'bc\'ad \'c1\'a4\'b7\'c4\'c7\'d1\'b4\'d9. \par
\'c4\'fc \'c1\'a4\'b7\'c4\'c0\'c7 \'b1\'e2\'c1\'d8\'c0\'ba \'c3\'e0\'b0\'aa\'c0\'ce\'b5\'a5 \'c0\'cc\'c3\'e0\'b0\'aa\'c0\'ba \'b0\'a1\'c0\'e5 \'bf\'c0\'b8\'a5\'c2\'ca\'c0\'c7 \'b0\'aa\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'d1\'b4\'d9. \'c3\'e0\'b0\'aa\'c0\'c7 \'bf\'de\'c2\'ca\'c0\'ba \'c0\'cc \'c3\'e0\'b0\'aa\'ba\'b8\'b4\'d9 \'c0\'db\'c0\'ba \'b0\'aa\'c0\'cc\'b0\'ed \'bf\'c0\'b8\'a5\'c2\'ca\'c0\'ba \'c3\'e0\'b0\'aa\'ba\'b8\'b4\'d9 \'c5\'ab \'b0\'aa\'c0\'b8\'b7\'ce \'c7\'d1\'b4\'d9. \'c0\'cc\'b7\'b8\'b0\'d4 \'c7\'d8\'bc\'ad \'b6\'c7 \'c3\'e0\'b0\'aa\'c0\'c7 \'c3\'e0\'b0\'aa\'c0\'b8\'b7\'ce \'ba\'d0\'c7\'d2\'c7\'cf\'b0\'ed \'ba\'d0\'c7\'d2\'c7\'cf\'b8\'e7 \'c5\'a9\'b1\'e2\'b0\'a1 1\'c0\'cc \'b5\'c9 \'b6\'a7\'b1\'ee\'c1\'f6 \'b9\'dd\'ba\'b9\'c7\'d1\'b4\'d9.\par
\par
\'c4\'fc\'c1\'a4\'b7\'c4\f1\fs20  \f0\fs18\'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2\par
1. \f1 n &gt; 1\par
 1.1\f0\'b9\'e8\'bf\'ad\f1\fs20  a\f2\fs18\'b8\'a6 \'ba\'d0\'c7\'d2\'c7\'cf\'bf\'a9 \'c3\'e0\'b0\'aa\'c0\'c7 \'c0\'a7\'c4\'a1\'b8\'a6 \f1 mid\f2\'b7\'ce \'ba\'b8\'b3\'bf\par
 1.2\'c4\'fc \'c1\'a4\'b7\'c4\f1\fs20  (a , \fs18 mid\fs20 )\tab\tab\tab\tab //\f2\fs18\'c3\'e0\'b0\'aa\'c0\'c7 \'bf\'de\'c2\'ca \'c3\'b9 \'ba\'ce\'ba\'d0\'ba\'ce\'c5\'cd \'c3\'e0\'b0\'aa \'b9\'d9\'b7\'ce \'c0\'fc\'b1\'ee\'c1\'f6 \'c1\'a4\'b7\'c4\f1\fs20\par
 1.3\f2\fs18\'c4\'fc \'c1\'a4\'b7\'c4\f1\fs20  (a + mid + 1, n - mid -1);\tab\tab //\f2\fs18\'c3\'e0\'b0\'aa\'c0\'c7 \'bf\'c0\'b8\'a5\'c2\'ca \'c3\'b9 \'ba\'ce\'ba\'d0\'ba\'ce\'c5\'cd \'b3\'a1\'b1\'ee\'c1\'f6 \'c1\'a4\'b7\'c4\f1\fs20\par
\par
\f2\fs18\'c0\'e5\'c1\'a1\par
-\'ba\'fc\'b8\'a3\'b0\'ed \'bf\'f8\'b8\'ae\'b0\'a1 \'b0\'a3\'b4\'dc\'c7\'d4\par
-\'b1\'b3\'c8\'af\'b0\'fa \'ba\'f1\'b1\'b3\'c8\'bd\'bc\'f6\'b0\'a1 \'c0\'fb\'b4\'d9.\par
\par
\'b4\'dc\'c1\'a1\par
-\'c0\'e7\'b1\'cd\'c0\'fb \'c7\'d4\'bc\'f6\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'d8\'bc\'ad \'c1\'b6\'bd\'c9\'bd\'ba\'b7\'b4\'b0\'d4 \'b4\'d9\'b7\'ef\'be\'df \'c7\'d1\'b4\'d9.\par
-\'be\'c8\'c1\'a4\'bc\'ba\'c0\'cc\'be\'f8\'b4\'d9.\par
-\'c0\'e7\'b1\'cd\'c8\'a3\'c3\'e2\'b7\'ce \'b3\'bb\'ba\'ce\'bd\'ba\'c5\'c3\'c0\'cc \'bb\'e7\'bf\'eb\'b5\'ca \'b8\'de\'b8\'f0\'b8\'ae \'bc\'d2\'bf\'e4\'b0\'a1 \'c5\'ad\f1\fs20\par
-\f2\'c3\'e0\'b0\'aa\'c0\'bb \'bf\'ec\'c3\'f8 \'b8\'c7 \'b3\'a1 \'b0\'aa\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \'bf\'aa\'bc\'f8 \'b9\'e8\'bf\'ad\'c3\'b3\'b7\'b3 \'b0\'a1\'c0\'e5 \'c0\'db\'c0\'ba \'b0\'aa\'c0\'bb \'c3\'e0\'c0\'b8\'b7\'ce \'bb\'e7\'bf\'eb\'c7\'cf\'b8\'e9 \'c8\'bf\'c0\'b2\'c0\'cc \'be\'c8 \'c1\'c1\'b4\'d9.\par
-\'c5\'ab \'b0\'aa\'c0\'bb \'b9\'e8\'bf\'ad\'c7\'cf\'b8\'e9 \'b3\'bb\'ba\'ce \'bd\'ba\'c5\'c3 \'bb\'e7\'bf\'eb\'c0\'b8\'b7\'ce \'bf\'c0\'b9\'f6\'c7\'c3\'b7\'ce\'b7\'ce \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5\'c0\'cc \'b0\'ad\'c1\'a6 \'c1\'be\'b7\'e1\f1\par
\par
\f2\fs18\'c6\'af\'c2\'a1\par
-\'c0\'e7\'b1\'cd\'c7\'d4\'bc\'f6\'b8\'a6 \'bb\'e7\'bf\'eb\par
\par
\cf1\highlight2\f3\fs19 void\cf3  \cf4 QuickSort\cf5 (\cf1 int\cf3  \cf6 nArray\cf5 [],\cf1 int\cf3  \cf6 n\cf5 )\{\cf3\tab\f4\tab\tab\tab\tab\tab\tab\tab\f3\par
\tab\cf1 int\cf3  \cf4 nTemp\cf3  \cf5 =\cf3  \cf7 0\cf5 ,\cf3  \cf4 axis\cf3  \cf5 =\cf3  \cf7 0\cf5 ;\f4\tab\tab\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\cf1 int\cf3  \cf4 nIndex1\cf3  \cf5 =\cf3  \cf7 0\cf5 ,\cf3  \cf4 nIndex2\cf3  \cf5 =\cf3  \cf7 0\cf5 ;\f4\tab\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\cf1 if\cf3  \cf5 (\cf6 n\cf3  \cf5 &gt;\cf3  \cf7 1\cf5 )\{\cf3\tab\tab\tab\tab\tab\tab\tab\cf8 //\f5\'c0\'e7\'b1\'cd\'c8\'a3\'c3\'e2\f3  \f5\'c1\'be\'b7\'e1\f3  \f5\'c1\'b6\'b0\'c7\tab\tab\cf3\f3\par
\tab\tab\cf4 axis\cf3  \cf5 =\cf3  \cf6 nArray\cf5 [\cf6 n\cf3  \cf5 -\cf3  \cf7 1\cf5 ];\cf3\tab\tab\tab\tab\cf8 //\f5\'c3\'e0\'b0\'aa\'c0\'bb\f3  \f5\'b8\'c7\f3  \f5\'bf\'ec\'c3\'f8\f3  \f5\'b0\'aa\'c0\'b8\'b7\'ce\f3  \f5\'c0\'e2\'c0\'bd\cf3\f3\par
\tab\tab\cf4 nIndex1\cf3  \cf5 =\cf3  \cf5 -\cf7 1\cf5 ;\cf3\tab\tab\tab\tab\tab\tab\cf8 //\f5\'bf\'de\'c2\'ca\'ba\'ce\'c5\'cd\f3  \f5\'b0\'cb\'bb\'f6\'c7\'d2\f3  \f5\'c0\'a7\'c4\'a1\f3  \f5\'c0\'fa\'c0\'e5\tab\cf3\f3\par
\tab\tab\cf4 nIndex2\cf3  \cf5 =\cf3  \cf6 n\cf3  \cf5 -\cf3  \cf7 1\cf5 ;\cf3\tab\tab\tab\tab\tab\cf8 //\f5\'bf\'c0\'b8\'a5\'c2\'ca\'ba\'ce\'c5\'cd\f3  \f5\'b0\'cb\'bb\'f6\'c7\'d2\f3  \f5\'c0\'a7\'c4\'a1\f3  \f5\'c0\'fa\'c0\'e5\cf3\f3\par
\tab\tab\cf1 while\cf3  \cf5 (\cf1 true\cf5 )\f4\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\cf5\{\f4\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\tab\cf1 while\cf3  \cf5 (\cf6 nArray\cf5 [++\cf4 nIndex1\cf5 ]\cf3  \cf5 &lt;\cf3  \cf4 axis\cf5 );\cf8 //\f5\'bf\'de\'c2\'ca\'ba\'ce\'c5\'cd\f3  \f5\'c3\'e0\'b0\'aa\'ba\'b8\'b4\'d9\f3  \f5\'c5\'ab\f3  \f5\'b0\'aa\'c0\'cc\f3  \f5\'c0\'d6\'b3\'aa\f3  \f5\'c8\'ae\'c0\'ce\cf3\f3\par
\tab\tab\tab\cf1 while\cf3  \cf5 (\cf6 nArray\cf5 [--\cf4 nIndex2\cf5 ]\cf3  \cf5 &gt;\cf3  \cf4 axis\cf5 );\cf8 //\f5\'bf\'c0\'b8\'a5\'c2\'ca\'ba\'ce\'c5\'cd\f3  \f5\'c3\'e0\'b0\'aa\'ba\'b8\'b4\'d9\f3  \f5\'c0\'db\'c0\'ba\f3  \f5\'b0\'aa\'c0\'cc\f3  \f5\'c0\'d6\'b3\'aa\fs18\'c8\'ae\'c0\'ce\cf3\f3\fs19\par
\tab\tab\tab\cf1 if\cf3  \cf5 (\cf4 nIndex1\cf3  \cf5 &gt;=\cf3  \cf4 nIndex2\cf5 )\cf3\tab\cf8 //index1\f5\'b0\'fa\f3  index2 \f5\'c0\'da\'b8\'ae\'b0\'a1\f3  \f5\'b9\'d9\'b2\'ee\'be\'fa\'c0\'b8\'b8\'e9\f3  \f5\'ba\'d0\'c7\'d2\f3  \f5\'b3\'a1\cf3\f3\par
\tab\tab\tab\tab\cf1 break\cf5 ;\f4\tab\tab\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\tab\cf8 //\f5\'be\'c6\'b4\'cf\'b6\'f3\'b8\'e9\f3  \f5\'b5\'d1\'c0\'c7\f3  \f5\'c0\'da\'b8\'ae\'b8\'a6\f3  \f5\'b9\'d9\'b2\'e3\'c1\'dc\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\tab\cf4 nTemp\cf3  \cf5 =\cf3  \cf6 nArray\cf5 [\cf4 nIndex1\cf5 ];\f4\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\tab\cf6 nArray\cf5 [\cf4 nIndex1\cf5 ]\cf3  \cf5 =\cf3  \cf6 nArray\cf5 [\cf4 nIndex2\cf5 ];\f4\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\tab\cf6 nArray\cf5 [\cf4 nIndex2\cf5 ]\cf3  \cf5 =\cf3  \cf4 nTemp\cf5 ;\f4\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\cf5\}\f4\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\cf8 //\f5\'c3\'e0\'b0\'aa\'b0\'fa\f3  \f5\'c3\'e0\'b0\'aa\'c0\'c7\f3  \f5\'c0\'a7\'c4\'a1\'bf\'a1\f3  \f5\'c0\'d6\'b4\'c2\f3  \f5\'b0\'aa\'c0\'bb\f3  \f5\'b9\'d9\'b2\'e3\f3  \f5\'c1\'dc\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\cf4 nTemp\cf3  \cf5 =\cf3  \cf6 nArray\cf5 [\cf4 nIndex1\cf5 ];\f4\tab\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\cf6 nArray\cf5 [\cf4 nIndex1\cf5 ]\cf3  \cf5 =\cf3  \cf6 nArray\cf5 [\cf6 n\cf3  \cf5 -\cf3  \cf7 1\cf5 ];\f4\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\cf6 nArray\cf5 [\cf6 n\cf3  \cf5 -\cf3  \cf7 1\cf5 ]\cf3  \cf5 =\cf3  \cf4 nTemp\cf5 ;\f4\tab\tab\tab\tab\tab\tab\tab\tab\cf3\f3\par
\tab\tab\cf4 QuickSort\cf5 (\cf6 nArray\cf5 ,\cf3  \cf4 nIndex1\cf5 );\cf3\tab\tab\tab\tab   \cf8 //\f5\'bf\'de\'c2\'ca\f3  \f5\'bc\'d2\'b1\'b8\'b0\'a3\f3  \f5\'c1\'a4\'b7\'c4\tab\tab\cf3\f3\par
\tab\tab\cf4 QuickSort\cf5 (\cf6 nArray\cf3  \cf5 +\cf3  \cf4 nIndex1\cf3  \cf5 +\cf3  \cf7 1\cf5 ,\cf3  \cf6 n\cf3  \cf5 -\cf3  \cf4 nIndex1\cf3  \cf5 -\cf3  \cf7 1\cf5 );\cf3  \cf8 //\f5\'bf\'c0\'b8\'a5\'c2\'ca\f3  \f5\'bc\'d2\'b1\'b8\'b0\'a3\f3  \f5\'c1\'a4\'b7\'c4\tab\cf3\f3\par
\tab\cf5\}\cf3\tab\f4\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\f3\par
\cf5\}\f4\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\par
\par
\cf0\highlight0\f2\fs18\'b9\'ae\'c1\'a6\'c7\'d8\'b0\'e1\'c0\'bb \'c0\'a7\'c7\'d8 \'b3\'aa\'bf\'c2 \'c4\'fc\'c1\'a4\'b7\'c4\f1\fs20  \f2\'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2\par
-\'ba\'f1\'c0\'e7\'b1\'cd\'c6\'c7 (\'b9\'dd\'ba\'b9\'b9\'ae\'c0\'b8\'b7\'ce \'b4\'eb\'c3\'bc)\par
-\'b3\'ad\'bc\'f6\'b8\'a6 \'c3\'e0\'c0\'b8\'b7\'ce \'c0\'e2\'c0\'ba \'b3\'ad\'bc\'f6 \'ba\'d0\'c7\'d2\par
-\'bb\'f0\'c0\'d4\'c1\'a4\'b7\'c4\f1\par
-\f2\'bc\'bc\'b0\'aa\'c0\'c7 \'c1\'df\'c0\'a7\f1\par
}
&#x0;</Text>
  <Encrypted>false</Encrypted>
  <Name>퀵 정렬</Name>
  <CreatedBy>Anonymous</CreatedBy>
  <CreatedOn>2017-03-28T22:00:59.7355021+09:00</CreatedOn>
  <UpdatedBy>Anonymous</UpdatedBy>
  <UpdatedOn>2017-04-01T11:02:23.4657503+09:00</UpdatedOn>
  <Words>퀵 정렬은 연속적인 분할에 의해서 정렬한다. 
퀵 정렬의 기준은 축값인데 이축값은 가장 오른쪽의 값을 사용한다. 축값의 왼쪽은 이 축값보다 작은 값이고 오른쪽은 축값보다 큰 값으로 한다. 이렇게 해서 또 축값의 축값으로 분할하고 분할하며 크기가 1이 될 때까지 반복한다.

퀵정렬 알고리즘
1. n &gt; 1
 1.1배열 a를 분할하여 축값의 위치를 mid로 보냄
 1.2퀵 정렬 (a , mid)				//축값의 왼쪽 첫 부분부터 축값 바로 전까지 정렬
 1.3퀵 정렬 (a + mid + 1, n - mid -1);		//축값의 오른쪽 첫 부분부터 끝까지 정렬

장점
-빠르고 원리가 간단함
-교환과 비교횟수가 적다.

단점
-재귀적 함수를 사용해서 조심스럽게 다뤄야 한다.
-안정성이없다.
-재귀호출로 내부스택이 사용됨 메모리 소요가 큼
-축값을 우측 맨 끝 값을 사용하여 역순 배열처럼 가장 작은 값을 축으로 사용하면 효율이 안 좋다.
-큰 값을 배열하면 내부 스택 사용으로 오버플로로 프로그램이 강제 종료

특징
-재귀함수를 사용

void QuickSort(int nArray[],int n){								
	int nTemp = 0, axis = 0;									
	int nIndex1 = 0, nIndex2 = 0;								
	if (n &gt; 1){							//재귀호출 종료 조건		
		axis = nArray[n - 1];				//축값을 맨 우측 값으로 잡음
		nIndex1 = -1;						//왼쪽부터 검색할 위치 저장	
		nIndex2 = n - 1;					//오른쪽부터 검색할 위치 저장
		while (true)										
		{											
			while (nArray[++nIndex1] &lt; axis);//왼쪽부터 축값보다 큰 값이 있나 확인
			while (nArray[--nIndex2] &gt; axis);//오른쪽부터 축값보다 작은 값이 있나확인
			if (nIndex1 &gt;= nIndex2)	//index1과 index2 자리가 바뀌었으면 분할 끝
				break;									
			//아니라면 둘의 자리를 바꿔줌						
			nTemp = nArray[nIndex1];							
			nArray[nIndex1] = nArray[nIndex2];						
			nArray[nIndex2] = nTemp;							
		}											
		//축값과 축값의 위치에 있는 값을 바꿔 줌						
		nTemp = nArray[nIndex1];								
		nArray[nIndex1] = nArray[n - 1];							
		nArray[n - 1] = nTemp;								
		QuickSort(nArray, nIndex1);				  //왼쪽 소구간 정렬		
		QuickSort(nArray + nIndex1 + 1, n - nIndex1 - 1); //오른쪽 소구간 정렬	
	}												
}													

문제해결을 위해 나온 퀵정렬 알고리즘
-비재귀판 (반복문으로 대체)
-난수를 축으로 잡은 난수 분할
-삽입정렬
-세값의 중위</Words>
  <PublishedOn>0001-01-01T00:00:00</PublishedOn>
  <PublishedUrl />
  <PublishedService>0</PublishedService>
</Page>