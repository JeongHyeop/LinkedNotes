<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <PageId>684fd8c8-3f30-41eb-b543-c7d79a456dfa</PageId>
  <Text>{\rtf1\ansi\ansicpg949\deff0\deflang1033\deflangfe1042{\fonttbl{\f0\fnil\fcharset129 \'b1\'bc\'b8\'b2;}{\f1\fnil\fcharset0 Microsoft Sans Serif;}}
{\colortbl ;\red0\green0\blue0;}
\viewkind4\uc1\pard\cf1\lang1042\f0\fs18 for_each\'b4\'c2 \'bc\'f8\'c2\'f7\'c0\'fb\'c0\'b8\'b7\'ce \'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca\'b5\'e9\'bf\'a1 \'b4\'e3\'b1\'e4 \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c7\'d4\'bc\'f6\'c0\'c7 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b7\'ce \'b3\'d1\'b0\'dc\'bc\'ad \'c7\'d4\'bc\'f6\'b8\'a6 \'bd\'c7\'c7\'e0\'bd\'c3\'c5\'b0\'b4\'c2 \'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2\'c0\'cc\'b4\'d9.\par
\par
#include &lt;algorithm&gt;\par
#include &lt;vector&gt;\par
#include &lt;iostream&gt;\par
using namespace std;\par
struct User\par
\{\par
\tab int UID;\par
\tab int PlayTime;\par
\};\par
\par
struct UpdatePlayTime\par
\{\par
\tab void operator() ( User&amp; user )\par
\tab\{\par
\tab\tab user.PlayTime += PlayTime;\par
\tab\}\par
\tab int PlayTime;\par
\};\par
int main()\par
\{\par
\tab vector&lt; User &gt; Users;\par
\tab User user1; user1.UID = 1; user1.PlayTime = 40000;\par
\tab User user2; user2.UID = 2; user2.PlayTime = 0;\par
\tab User user3; user3.UID = 3; user3.PlayTime = 25000;\par
\tab Users.push_back( user1 );\par
\tab Users.push_back( user2 );\par
\tab Users.push_back( user3 );\par
\tab // \'c7\'f6\'c0\'e7 \'c7\'c3\'b7\'b9\'c0\'cc \'bd\'c3\'b0\'a3\par
\tab vector&lt; User &gt;::iterator IterUser;\par
\tab for( IterUser = Users.begin(); IterUser != Users.end(); ++IterUser )\par
\tab\{\par
\tab\tab cout &lt;&lt; "UID : " &lt;&lt; cout &lt;&lt; IterUser-&gt;UID &lt;&lt; "\'c0\'c7 \'c3\'d1 \'c7\'c3\'b7\'b9\'c0\'cc \'bd\'c3\'b0\'a3: " &lt;&lt;\par
\tab\tab IterUser-&gt;PlayTime &lt;&lt; endl;\par
\tab\}\par
\tab cout &lt;&lt; endl;\par
\tab UpdatePlayTime updatePlayTime;\par
\tab updatePlayTime.PlayTime = 200;\par
\tab // \'b5\'ce \'b9\'f8\'c2\'b0 \'c0\'af\'c0\'fa\'ba\'ce\'c5\'cd \'b0\'bb\'bd\'c5\par
\tab for_each( Users.begin() + 1, Users.end(), updatePlayTime );\par
\tab for( IterUser = Users.begin(); IterUser != Users.end(); ++IterUser )\par
\tab\{\par
\tab\tab cout &lt;&lt; "UID : " &lt;&lt; cout &lt;&lt; IterUser-&gt;UID &lt;&lt; "\'c0\'c7 \'c3\'d1 \'c7\'c3\'b7\'b9\'c0\'cc \'bd\'c3\'b0\'a3: " &lt;&lt; IterUser-&gt;PlayTime &lt;&lt; endl;\par
\tab\}\par
\tab return 0;\par
\}\cf0\f1\fs20\par
}
&#x0;</Text>
  <Encrypted>false</Encrypted>
  <Name>for_each 알고리즘</Name>
  <CreatedBy>Anonymous</CreatedBy>
  <CreatedOn>2017-04-12T23:33:23.8243885+09:00</CreatedOn>
  <UpdatedBy>Anonymous</UpdatedBy>
  <UpdatedOn>2017-04-12T23:39:06.9221935+09:00</UpdatedOn>
  <Words>for_each는 순차적으로 컨테이너들에 담긴 데이터를 함수의 파라미터로 넘겨서 함수를 실행시키는 알고리즘이다.

#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
using namespace std;
struct User
{
	int UID;
	int PlayTime;
};

struct UpdatePlayTime
{
	void operator() ( User&amp; user )
	{
		user.PlayTime += PlayTime;
	}
	int PlayTime;
};
int main()
{
	vector&lt; User &gt; Users;
	User user1; user1.UID = 1; user1.PlayTime = 40000;
	User user2; user2.UID = 2; user2.PlayTime = 0;
	User user3; user3.UID = 3; user3.PlayTime = 25000;
	Users.push_back( user1 );
	Users.push_back( user2 );
	Users.push_back( user3 );
	// 현재 플레이 시간
	vector&lt; User &gt;::iterator IterUser;
	for( IterUser = Users.begin(); IterUser != Users.end(); ++IterUser )
	{
		cout &lt;&lt; "UID : " &lt;&lt; cout &lt;&lt; IterUser-&gt;UID &lt;&lt; "의 총 플레이 시간: " &lt;&lt;
		IterUser-&gt;PlayTime &lt;&lt; endl;
	}
	cout &lt;&lt; endl;
	UpdatePlayTime updatePlayTime;
	updatePlayTime.PlayTime = 200;
	// 두 번째 유저부터 갱신
	for_each( Users.begin() + 1, Users.end(), updatePlayTime );
	for( IterUser = Users.begin(); IterUser != Users.end(); ++IterUser )
	{
		cout &lt;&lt; "UID : " &lt;&lt; cout &lt;&lt; IterUser-&gt;UID &lt;&lt; "의 총 플레이 시간: " &lt;&lt; IterUser-&gt;PlayTime &lt;&lt; endl;
	}
	return 0;
}</Words>
  <PublishedOn>0001-01-01T00:00:00</PublishedOn>
  <PublishedUrl />
  <PublishedService>0</PublishedService>
</Page>