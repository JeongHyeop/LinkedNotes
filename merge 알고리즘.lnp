<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <PageId>5e553a8a-f46c-4fde-90df-4233d85be021</PageId>
  <Text>{\rtf1\ansi\ansicpg949\deff0\deflang1033\deflangfe1042{\fonttbl{\f0\fnil\fcharset0 Microsoft Sans Serif;}{\f1\fmodern\fprq1\fcharset129 \'b1\'bc\'b8\'b2;}{\f2\fnil\fcharset129 KoPub\'b9\'d9\'c5\'c1\'c3\'bc Light;}{\f3\fswiss\fcharset0 KoPub\'b9\'d9\'c5\'c1\'c3\'bc Light;}{\f4\fnil\fcharset129 \'b1\'bc\'b8\'b2;}}
{\colortbl ;\red0\green0\blue0;}
\viewkind4\uc1\pard\lang1042\f0\fs20 merge \f1\'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2\'c0\'ba \'b5\'ce \'b0\'b3\'c0\'c7 \'c1\'a4\'b7\'c4\'b5\'c8 \'b1\'b8\'b0\'a3\'c0\'bb \'c7\'d5\'c4\'a5 \'b6\'a7 \'bb\'e7\'bf\'eb\'c7\'cf\'b4\'c2 \'b0\'cd\'c0\'b8\'b7\'ce \'b5\'ce \f2\fs19\'b1\'b8\'b0\'a3\'b0\'fa \'b0\'e3\'c4\'a1\'c1\'f6 \'be\'ca\'c0\'ba \'b0\'f7\'bf\'a1 \'c7\'d5\'c4\'a3 \'b0\'e1\'b0\'fa\'b8\'a6 \'b3\'d6\'be\'ee\'be\'df \'c7\'d1\'b4\'d9\f3 . \f2\'c1\'d6\'c0\'c7\'c7\'d8\'be\'df \'c7\'d2 \'c1\'a1\'c0\'ba \'c7\'d5\'c4\'a1\'b1\'e2 \'c0\'fc\'bf\'a1 \'c0\'cc\'b9\'cc \'c1\'a4\'b7\'c4\'c0\'cc \'b5\'c7\'be\'ee \'c0\'d6\'be\'ee\'be\'df \'c7\'cf\'b8\'e7 \'c7\'d5\'c4\'a3 \'b0\'e1\'b0\'fa\'b8\'a6 \'b3\'d6\'b4\'c2 \'b0\'cd\'c0\'ba \'c7\'d5\'c4\'a1\'b4\'c2 \'b0\'cd\'b5\'e9\'b0\'fa \'b0\'e3\'c4\'a1\'b8\'e9 \'be\'c8\'b5\'c7\'b8\'e7\f3 , \f2\'b6\'c7\'c7\'d1 \'c7\'d5\'c4\'a3 \'b0\'e1\'b0\'fa\'b8\'a6 \'b3\'d6\'c0\'bb \'bc\'f6 \'c0\'d6\'b4\'c2 \'b0\'f8\'b0\'a3\'c0\'bb \'c8\'ae\'ba\'b8\'c7\'cf\'b0\'ed \'c0\'d6\'be\'ee\'be\'df \'c7\'d1\'b4\'d9\f3 .\par
\par
\cf1\f4\fs18 merge\'c0\'c7 \'bf\'f8\'c7\'fc\par
template&lt;class InputIterator1, class InputIterator2, class OutputIterator&gt;\par
OutputIterator merge( InputIterator1 _First1, InputIterator1 _Last1,\par
InputIterator2 _First2, InputIterator2 _Last2, OutputIterator _Result\par
);\par
\par
\'c3\'b9 \'b9\'f8\'c2\'b0\'bf\'cd \'b5\'ce \'b9\'f8\'c2\'b0 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b4\'c2 \'c7\'cf\'b3\'aa\'c0\'c7 \'c0\'d4\'b7\'c2 \'b1\'b8\'b0\'a3\'c0\'c7 \'bd\'c3\'c0\'db\'b0\'fa \'b8\'b6\'c1\'f6\'b8\'b7\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'b9\'dd\'ba\'b9\'c0\'da\'c0\'cc\'b4\'d9. \'bc\'bc \'b9\'f8\'c2\'b0\'bf\'cd \'b3\'d7 \'b9\'f8\'c2\'b0 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b4\'c2 \'b4\'d9\'b8\'a5 \'c0\'d4\'b7\'c2\'c0\'c7 \'bd\'c3\'c0\'db\'b0\'fa \'b8\'b6\'c1\'f6\'b8\'b7\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'b9\'dd\'ba\'b9\'c0\'da\'c0\'cc\'b4\'d9. \'b4\'d9\'bc\'b8 \'b9\'f8\'c2\'b0 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b4\'c2 \'c7\'d5\'c4\'a3 \'b0\'e1\'b0\'fa\'b8\'a6 \'b3\'d6\'c0\'bb \'c3\'e2\'b7\'c2 \'b1\'b8\'b0\'a3\'c0\'c7 \'bd\'c3\'c0\'db\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'b9\'dd\'ba\'b9\'c0\'da\'b4\'d9.\par
template&lt;class InputIterator1, class InputIterator2, class OutputIterator, classBinaryPredicate&gt;\par
OutputIterator merge( InputIterator1 _First1, InputIterator1 _Last1,InputIterator2 _First2, InputIterator2 _Last2, OutputIterator _Result, BinaryPredicate _Comp );\par
\'c3\'b9 \'b9\'f8\'c2\'b0\'bf\'cd \'b5\'ce \'b9\'f8\'c2\'b0 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b4\'c2 \'c7\'cf\'b3\'aa\'c0\'c7 \'c0\'d4\'b7\'c2 \'b1\'b8\'b0\'a3\'c0\'c7 \'bd\'c3\'c0\'db\'b0\'fa \'b8\'b6\'c1\'f6\'b8\'b7\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2\par
\'b9\'dd\'ba\'b9\'c0\'da\'c0\'cc\'b4\'d9. \'bc\'bc \'b9\'f8\'c2\'b0\'bf\'cd \'b3\'d7 \'b9\'f8\'c2\'b0 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b4\'c2 \'b4\'d9\'b8\'a5 \'c0\'d4\'b7\'c2\'c0\'c7 \'bd\'c3\'c0\'db\'b0\'fa \'b8\'b6\'c1\'f6\'b8\'b7\'c0\'bb \'b0\'a1\par
\'b8\'ae\'c5\'b0\'b4\'c2 \'b9\'dd\'ba\'b9\'c0\'da\'c0\'cc\'b4\'d9. \'b4\'d9\'bc\'b8 \'b9\'f8\'c2\'b0 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b4\'c2 \'c7\'d5\'c4\'a3 \'b0\'e1\'b0\'fa\'b8\'a6 \'b3\'d6\'c0\'bb \'c3\'e2\'b7\'c2 \'b1\'b8\'b0\'a3\'c0\'c7 \'bd\'c3\par
\'c0\'db\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'b9\'dd\'ba\'b9\'c0\'da\'c0\'cc\'b4\'d9. \'bf\'a9\'bc\'b8 \'b9\'f8\'c2\'b0 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b4\'c2 \'ba\'f1\'b1\'b3 \'c1\'b6\'b0\'c7\'c0\'da\'b4\'d9.\par
merge \'bb\'e7\'bf\'eb\'b9\'e6\'b9\'fd\par
vector&lt;int&gt; vec1, vec2, vec3;\par
\'a1\'a6..\par
merge( vec1.begin(), vec1.end(), vec2.begin(), vec2.end(), vec3.begin() );\cf0\f0\fs20\par
}
&#x0;</Text>
  <Encrypted>false</Encrypted>
  <Name>merge 알고리즘</Name>
  <CreatedBy>Anonymous</CreatedBy>
  <CreatedOn>2017-04-13T00:10:20.4684976+09:00</CreatedOn>
  <UpdatedBy>Anonymous</UpdatedBy>
  <UpdatedOn>2017-04-13T00:12:44.3355509+09:00</UpdatedOn>
  <Words>merge 알고리즘은 두 개의 정렬된 구간을 합칠 때 사용하는 것으로 두 구간과 겹치지 않은 곳에 합친 결과를 넣어야 한다. 주의해야 할 점은 합치기 전에 이미 정렬이 되어 있어야 하며 합친 결과를 넣는 것은 합치는 것들과 겹치면 안되며, 또한 합친 결과를 넣을 수 있는 공간을 확보하고 있어야 한다.

merge의 원형
template&lt;class InputIterator1, class InputIterator2, class OutputIterator&gt;
OutputIterator merge( InputIterator1 _First1, InputIterator1 _Last1,
InputIterator2 _First2, InputIterator2 _Last2, OutputIterator _Result
);

첫 번째와 두 번째 파라미터는 하나의 입력 구간의 시작과 마지막을 가리키는 반복자이다. 세 번째와 네 번째 파라미터는 다른 입력의 시작과 마지막을 가리키는 반복자이다. 다섯 번째 파라미터는 합친 결과를 넣을 출력 구간의 시작을 가리키는 반복자다.
template&lt;class InputIterator1, class InputIterator2, class OutputIterator, classBinaryPredicate&gt;
OutputIterator merge( InputIterator1 _First1, InputIterator1 _Last1,InputIterator2 _First2, InputIterator2 _Last2, OutputIterator _Result, BinaryPredicate _Comp );
첫 번째와 두 번째 파라미터는 하나의 입력 구간의 시작과 마지막을 가리키는
반복자이다. 세 번째와 네 번째 파라미터는 다른 입력의 시작과 마지막을 가
리키는 반복자이다. 다섯 번째 파라미터는 합친 결과를 넣을 출력 구간의 시
작을 가리키는 반복자이다. 여섯 번째 파라미터는 비교 조건자다.
merge 사용방법
vector&lt;int&gt; vec1, vec2, vec3;
…..
merge( vec1.begin(), vec1.end(), vec2.begin(), vec2.end(), vec3.begin() );</Words>
  <PublishedOn>0001-01-01T00:00:00</PublishedOn>
  <PublishedService>0</PublishedService>
</Page>