<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <PageId>f58fc4da-0e9a-4dad-8689-72863b10807a</PageId>
  <Text>{\rtf1\ansi\ansicpg949\deff0\deflang1033\deflangfe1042{\fonttbl{\f0\fnil\fcharset0 Microsoft Sans Serif;}{\f1\fmodern\fprq1\fcharset129 \'b1\'bc\'b8\'b2;}{\f2\fnil\fcharset129 \'b1\'bc\'b8\'b2;}}
{\colortbl ;\red0\green0\blue0;}
\viewkind4\uc1\pard\lang1042\f0\fs20 sort \f1\'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2\'c0\'ba \'c1\'a4\'b7\'c4\f0\fs20  \f1\fs18\'c7\'d2\'b6\'a7 \'bb\'e7\'bf\'eb\'b5\'c7\'b4\'c2 \'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2\'c0\'cc\'b4\'d9.\par
\par
\pard\cf1\f2 sort\'c0\'c7 \'bf\'f8\'c7\'fc\par
template&lt;class RandomAccessIterator&gt;\par
void sort( RandomAccessIterator _First, RandomAccessIterator _Last );\par
\'c3\'b9 \'b9\'f8\'c2\'b0\'bf\'cd \'b5\'ce \'b9\'f8\'c2\'b0 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b4\'c2 \'c1\'a4\'b7\'c4\'c7\'cf\'b7\'c1\'b4\'c2 \'b1\'b8\'b0\'a3\'c0\'c7 \'bd\'c3\'c0\'db\'b0\'fa \'b8\'b6\'c1\'f6\'b8\'b7\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'b9\'dd\'ba\'b9\'c0\'da\'c0\'cc\'b4\'d9. \'ba\'f1\'b1\'b3 \'c1\'b6\'b0\'c7\'c0\'da\'b8\'a6 \'c7\'ca\'bf\'e4\'b7\'ce \'c7\'cf\'c1\'f6 \'be\'ca\'b0\'ed \'b1\'e2\'ba\'bb\'c7\'fc\'c0\'bb \'c0\'fa\'c0\'e5\'c7\'d1 \'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca\'b8\'a6 \'bf\'c0\'b8\'a7\'c2\'f7\'bc\'f8\'c0\'b8\'b7\'ce \'c1\'a4\'b7\'c4\'c7\'d1\'b4\'d9.\par
\par
template&lt;class RandomAccessIterator, class Pr&gt;\par
void sort( RandomAccessIterator _First, RandomAccessIterator _Last,\par
BinaryPredicate _Comp );\par
\'c3\'b9 \'b9\'f8\'c2\'b0\'bf\'cd \'b5\'ce \'b9\'f8\'c2\'b0 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b4\'c2 \'c1\'a4\'b7\'c4\'c7\'cf\'b7\'c1\'b4\'c2 \'b1\'b8\'b0\'a3\'c0\'c7 \'bd\'c3\'c0\'db\'b0\'fa \'b8\'b6\'c1\'f6\'b8\'b7\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'b9\'dd\'ba\'b9\'c0\'da\'c0\'cc\'b4\'d9. \'bc\'bc \'b9\'f8\'c2\'b0 \'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b4\'c2 \'c1\'a4\'b7\'c4 \'b9\'e6\'b9\'fd\'c0\'bb \'b1\'e2\'bc\'fa\'c7\'d1 \'ba\'f1\'b1\'b3 \'c1\'b6\'b0\'c7\'c0\'da\'b4\'d9. sort \'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2\'c0\'c7 \'bf\'f8\'c7\'fc\'c0\'bb \'ba\'b8\'b8\'e9 \'be\'cb \'bc\'f6 \'c0\'d6\'b5\'ed\'c0\'cc \'b7\'a3\'b4\'fd \'c1\'a2\'b1\'d9 \'b9\'dd\'ba\'b9\'c0\'da\'b8\'a6 \'c1\'f6\'bf\'f8\'c7\'cf\'b4\'c2 \'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca\'b8\'b8 sort \'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'d2 \'bc\'f6 \'c0\'d6\'b4\'d9.\par
sort \'bb\'e7\'bf\'eb\'b9\'e6\'b9\'fd\par
vector&lt;int&gt; vec1;\par
\'a1\'a6..\par
// \'bf\'c0\'b8\'a7\'c2\'f7\'bc\'f8 \'c1\'a4\'b7\'c4\par
sort( vec1.begin(), vec1.end() );\par
// \'b3\'bb\'b8\'b2\'c2\'f7\'bc\'f8 \'c1\'a4\'b7\'c4\par
\pard Sort( vec1.begin(), vec1.end(), greater&lt;int&gt;() );\cf0\f0\fs20\par
}
&#x0;</Text>
  <Encrypted>false</Encrypted>
  <Name>sort 알고리즘</Name>
  <CreatedBy>Anonymous</CreatedBy>
  <CreatedOn>2017-04-12T23:49:40.4419112+09:00</CreatedOn>
  <UpdatedBy>Anonymous</UpdatedBy>
  <UpdatedOn>2017-04-12T23:50:30.9920003+09:00</UpdatedOn>
  <Words>sort 알고리즘은 정렬 할때 사용되는 알고리즘이다.

sort의 원형
template&lt;class RandomAccessIterator&gt;
void sort( RandomAccessIterator _First, RandomAccessIterator _Last );
첫 번째와 두 번째 파라미터는 정렬하려는 구간의 시작과 마지막을 가리키는 반복자이다. 비교 조건자를 필요로 하지 않고 기본형을 저장한 컨테이너를 오름차순으로 정렬한다.

template&lt;class RandomAccessIterator, class Pr&gt;
void sort( RandomAccessIterator _First, RandomAccessIterator _Last,
BinaryPredicate _Comp );
첫 번째와 두 번째 파라미터는 정렬하려는 구간의 시작과 마지막을 가리키는 반복자이다. 세 번째 파라미터는 정렬 방법을 기술한 비교 조건자다. sort 알고리즘의 원형을 보면 알 수 있듯이 랜덤 접근 반복자를 지원하는 컨테이너만 sort 알고리즘을 사용할 수 있다.
sort 사용방법
vector&lt;int&gt; vec1;
…..
// 오름차순 정렬
sort( vec1.begin(), vec1.end() );
// 내림차순 정렬
Sort( vec1.begin(), vec1.end(), greater&lt;int&gt;() );</Words>
  <PublishedOn>0001-01-01T00:00:00</PublishedOn>
  <PublishedService>0</PublishedService>
</Page>