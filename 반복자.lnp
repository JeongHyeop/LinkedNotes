<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <PageId>a43f2bfc-a88d-41ea-a7ca-b67615f387ca</PageId>
  <Text>{\rtf1\ansi\ansicpg949\deff0\deflang1033\deflangfe1042{\fonttbl{\f0\fmodern\fprq1\fcharset129 \'b1\'bc\'b8\'b2;}{\f1\fnil\fcharset0 Microsoft Sans Serif;}{\f2\fnil\fcharset129 \'b1\'bc\'b8\'b2;}{\f3\fswiss\fcharset0 KoPub\'b5\'b8\'bf\'f2\'c3\'bc Bold;}{\f4\fswiss\fcharset0 KoPub\'b9\'d9\'c5\'c1\'c3\'bc Light;}{\f5\fnil\fcharset129 KoPub\'b9\'d9\'c5\'c1\'c3\'bc Light;}{\f6\fswiss\fcharset0 KoPub\'b5\'b8\'bf\'f2\'c3\'bc Medium;}{\f7\fnil\fcharset129 KoPub\'b5\'b8\'bf\'f2\'c3\'bc Medium;}{\f8\fswiss\fcharset129 KoPub\'b9\'d9\'c5\'c1\'c3\'bc Light;}}
{\colortbl ;\red0\green0\blue0;\red119\green119\blue120;}
\viewkind4\uc1\pard\lang1042\f0\fs20\'b9\'dd\'ba\'b9\'c0\'da(\f1 Iterator\f0 )\'b6\'f5 \'c6\'f7\'c0\'ce\'c5\'cd\'c0\'c7 \'c0\'cf\'b9\'dd\'c8\'ad\'b5\'c8 \'b0\'b3\'b3\'e4\'c0\'cc\'b4\'d9. \f1 STL\f0\'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca\'bf\'a1 \'c0\'fa\'c0\'e5\'b5\'c8 \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'bc\'f8\'c8\'b8 \'c7\'d2 \'bc\'f6\'b5\'b5 \'c0\'d6\'b0\'ed \'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca\'c0\'c7 \'c6\'af\'c1\'a4\'c0\'a7\'c4\'a1\'b8\'a6 \'b0\'a1\'b8\'ae\'c5\'b2\'b4\'d9. \'c6\'f7\'c0\'ce\'c5\'cd\'bf\'cd \'ba\'f1\'bd\'c1\'c7\'cf\'b0\'d4 ++\'b0\'fa --\'b7\'ce \'bf\'f2\'c1\'f7\'c0\'cc\'b8\'e7 \'b4\'eb\'c0\'d4\'b0\'fa \'ba\'f1\'b1\'b3\'b5\'b5 \'b0\'a1\'b4\'c9\'c7\'cf\'b4\'d9. \'b0\'a2 \'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca\'c0\'c7 \'c0\'fc\'bf\'eb \'b9\'dd\'ba\'b9\'c0\'da\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'d8 \'bb\'e7\'bf\'eb\'c7\'d1\'b4\'d9.\par
\par
\cf1\f2\fs18 STL\'c0\'c7 \'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca &lt; \'c0\'da\'b7\'e1\'c7\'fc &gt;::iterator \'ba\'af\'bc\'f6 \'c0\'cc\'b8\'a7\par
\par
\pard\cf0\b\f3\fs19 begin()\par
\cf1\b0\f2\fs18\'c3\'b9 \'b9\'f8\'c2\'b0 \'bf\'e4\'bc\'d2\'b8\'a6 \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'b9\'dd\'ba\'b9\'c0\'da\'b8\'a6 \'b8\'ae\'c5\'cf\'c7\'d1\'b4\'d9.\par
\pard\'bf\'b9) list&lt; int &gt;::iterator iterFirst = list1.begin();\cf0\f4\par
\par
\pard\b\f3\fs19 end()\par
\b0\f5\'b8\'b6\'c1\'f6\'b8\'b7 \'bf\'e4\'bc\'d2\'b8\'a6 \'b0\'a1\'b8\'ae\'c5\'b2\'b4\'d9\f4 . \f5\'c1\'d6\'c0\'c7\'c7\'d2 \'c1\'a1\'c0\'ba \f4 begin()\f5\'b0\'fa \'b4\'de\'b8\'ae \f4 end()\f5\'b4\'c2 \'b8\'b6\'c1\'f6\'b8\'b7 \'bf\'e4\'bc\'d2\par
\'b9\'d9\'b7\'ce \'b4\'d9\'c0\'bd\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b2\'b4\'d9\f4 . \f5\'c1\'ef \'bb\'e7\'bf\'eb\'c7\'d2 \'bc\'f6 \'be\'f8\'b4\'c2 \'bf\'b5\'bf\'aa\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b0\'b9\'c7\'b7\'ce \f4 end() \f5\'c0\'a7\'c4\'a1\'c0\'c7\par
\'b9\'dd\'ba\'b9\'c0\'da\'b4\'c2 \'bb\'e7\'bf\'eb\'c7\'cf\'c1\'f6 \'b8\'f8\'c7\'d1\'b4\'d9\f4 .\par
\pard\f5\'bf\'b9\f4 ) list&lt; int &gt;::iterator iterEnd = list1.end();\par
\par
for\f5\fs18\'b9\'ae\'bf\'a1\'bc\'ad\'c0\'c7 \'bb\'e7\'bf\'eb \'bf\'b9\f4\fs19\par
\pard\cf1\f2\fs18 for( list&lt; int &gt;::iterator iterPos = list1.begin(); iterPos != list1.end();\par
++iterPos )\par
\{\par
cout &lt;&lt; "list1\'c0\'c7 \'bf\'e4\'bc\'d2 : " &lt;&lt; *iterPos &lt;&lt; endl;\par
\pard\}\par
\par
\pard\b\f3\fs19 rbegin()\par
\b0\f4 begin()\f5\'bf\'cd \'ba\'f1\'bd\'c1\'c7\'d1\'b5\'a5 \'b4\'d9\'b8\'a5 \'c1\'a1\'c0\'ba \'bf\'aa \'b9\'e6\'c7\'e2\'c0\'b8\'b7\'ce \'c3\'b9 \'b9\'f8\'c2\'b0 \'bf\'e4\'bc\'d2\'b8\'a6 \'b0\'a1\'b8\'ae\'c5\'b2\'b4\'d9\'b4\'c2 \'b0\'cd\'c0\'cc\par
\'b4\'d9\f4 . \f5\'b1\'d7\'b8\'ae\'b0\'ed \'bb\'e7\'bf\'eb\'c7\'cf\'b4\'c2 \'b9\'dd\'ba\'b9\'c0\'da\'b5\'b5 \'b4\'d9\'b8\'a8\'b4\'cf\'b4\'d9\f4 .\par
\cf2\f6\fs12 4\f7\'c0\'e5 \cf1\'bf\'ac\'b0\'e1 \'b8\'ae\'bd\'ba\'c6\'ae \f6 60\par
\pard\f5\fs19\'bf\'b9\f4 ) list::reverse_iterator IterPos = list1-&gt;rbegin();\par
\par
\pard\cf0\b\f3 rend()\par
\b0\f4 end()\f5\'bf\'cd \'ba\'f1\'bd\'c1\'c7\'d1\'b5\'a5 \'b4\'d9\'b8\'a5 \'c1\'a1\'c0\'ba \'bf\'aa \'b9\'e6\'c7\'e2\'c0\'b8\'b7\'ce \'b8\'b6\'c1\'f6\'b8\'b7 \'bf\'e4\'bc\'d2 \'b4\'d9\'c0\'bd\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b2\'b4\'d9\'b4\'c2 \'b0\'cd\par
\'c0\'cc\'b4\'d9\f4 .\par
\f5\'bf\'b9\f4 ) list::reverse_iterator IterPos = list1.rend();\par
\f5\'b9\'dd\'ba\'b9\'b9\'ae\'bf\'a1\'bc\'ad \f4 rbegin()\f5\'b0\'fa \f4 rend()\f5\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \f4 list1\f5\'c0\'c7 \'b0\'a2 \'b5\'a5\'c0\'cc\'c5\'cd\'bf\'a1 \'c1\'a2\'b1\'d9\'c7\'d1\'b4\'d9\'b8\'e9 \'b4\'d9\par
\'c0\'bd\'c3\'b3\'b7\'b3 \'bb\'e7\'bf\'eb\'c7\'cf\'b8\'e9 \'b5\'c8\'b4\'d9\f4 .\par
\par
for\f8\fs18\'b9\'ae \'bf\'aa\'b9\'e6\'c7\'e2 \'bc\'f8\'c8\'b8\f4\fs19\par
\cf1\f2\fs18 for( list::reverse_iterator IterPos = list1.rbegin(); IterPos != list1.rend();\par
++IterPos )\par
\{\par
cout &lt;&lt; "\'bf\'aa \'b9\'e6\'c7\'e2 list1\'c0\'c7 \'bf\'e4\'bc\'d2 : " &lt;&lt; *IterPos &lt;&lt; endl;\par
\}\cf0\f1\fs20\par
}
&#x0;</Text>
  <Encrypted>false</Encrypted>
  <Name>반복자</Name>
  <CreatedBy>Anonymous</CreatedBy>
  <CreatedOn>2017-04-11T17:07:20.6730513+09:00</CreatedOn>
  <UpdatedBy>Anonymous</UpdatedBy>
  <UpdatedOn>2017-04-11T17:24:47.2779136+09:00</UpdatedOn>
  <Words>반복자(Iterator)란 포인터의 일반화된 개념이다. STL컨테이너에 저장된 데이터를 순회 할 수도 있고 컨테이너의 특정위치를 가리킨다. 포인터와 비슷하게 ++과 --로 움직이며 대입과 비교도 가능하다. 각 컨테이너의 전용 반복자를 구현해 사용한다.

STL의 컨테이너 &lt; 자료형 &gt;::iterator 변수 이름

begin()
첫 번째 요소를 가리키는 반복자를 리턴한다.
예) list&lt; int &gt;::iterator iterFirst = list1.begin();

end()
마지막 요소를 가리킨다. 주의할 점은 begin()과 달리 end()는 마지막 요소
바로 다음을 가리킨다. 즉 사용할 수 없는 영역을 가리키므로 end() 위치의
반복자는 사용하지 못한다.
예) list&lt; int &gt;::iterator iterEnd = list1.end();

for문에서의 사용 예
for( list&lt; int &gt;::iterator iterPos = list1.begin(); iterPos != list1.end();
++iterPos )
{
cout &lt;&lt; "list1의 요소 : " &lt;&lt; *iterPos &lt;&lt; endl;
}

rbegin()
begin()와 비슷한데 다른 점은 역 방향으로 첫 번째 요소를 가리킨다는 것이
다. 그리고 사용하는 반복자도 다릅니다.
4장 연결 리스트 60
예) list::reverse_iterator IterPos = list1-&gt;rbegin();

rend()
end()와 비슷한데 다른 점은 역 방향으로 마지막 요소 다음을 가리킨다는 것
이다.
예) list::reverse_iterator IterPos = list1.rend();
반복문에서 rbegin()과 rend()를 사용하여 list1의 각 데이터에 접근한다면 다
음처럼 사용하면 된다.

for문 역방향 순회
for( list::reverse_iterator IterPos = list1.rbegin(); IterPos != list1.rend();
++IterPos )
{
cout &lt;&lt; "역 방향 list1의 요소 : " &lt;&lt; *IterPos &lt;&lt; endl;
}</Words>
  <PublishedOn>0001-01-01T00:00:00</PublishedOn>
  <PublishedService>0</PublishedService>
</Page>